require 'rails_helper'
require 'pry'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe WonkoVersionsController, type: :controller do
  # This should return the minimal set of attributes required to create a valid
  # WonkoVersion. As you add validations to WonkoVersion, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { Fabricate.attributes_for(:wv_minecraft_183) }

  let(:invalid_attributes) do
    {
      wonkofile: {},
      asdf: '',
      stuff: nil
    }
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # WonkoVersionsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe 'GET #index' do
    it 'assigns all wonko_versions as @wonko_versions' do
      wonko_version = Fabricate(:wv_minecraft_183)
      get :index, wonko_file_id: wonko_version.wonkofile.to_param
      expect(assigns(:wonko_versions).to_a).to eq([wonko_version])
    end
  end

  describe 'GET #show' do
    it 'assigns the requested wonko_version as @wonko_version' do
      wonko_version = Fabricate(:wv_minecraft_183)
      get :show, wonko_file_id: wonko_version.wonkofile.to_param, id: wonko_version.to_param
      expect(assigns(:wonko_version)).to eq(wonko_version)
    end
  end

  describe 'GET #new' do
    login_user

    it 'assigns a new wonko_version as @wonko_version' do
      wonko_file = Fabricate(:wf_minecraft)
      get :new, wonko_file_id: wonko_file.to_param
      expect(assigns(:wonko_version)).to be_a_new(WonkoVersion)
    end
  end

  describe 'GET #edit' do
    it 'assigns the requested wonko_version as @wonko_version' do
      wonko_version = Fabricate(:wv_minecraft_183)
      sign_in wonko_version.user

      get :edit, wonko_file_id: wonko_version.wonkofile.to_param, id: wonko_version.to_param
      expect(assigns(:wonko_version)).to eq(wonko_version)
    end
  end

  describe 'POST #create' do
    let(:wonko_file) { Fabricate(:wf_minecraft) }
    login_user

    context 'with valid params' do
      it 'creates a new WonkoVersion' do
        expect do
          post :create, wonko_file_id: wonko_file.to_param,
                        wonko_version: Fabricate.attributes_for(:wv_minecraft_183)
        end.to change { wonko_file.reload.wonkoversions.count }.by(1)
      end

      it 'assigns a newly created wonko_version as @wonko_version' do
        post :create, wonko_file_id: wonko_file.to_param,
                      wonko_version: Fabricate.attributes_for(:wv_minecraft_183)
        expect(assigns(:wonko_version)).to be_a(WonkoVersion)
        expect(assigns(:wonko_version)).to be_persisted
      end

      it 'redirects to the created wonko_version' do
        attributes = Fabricate.attributes_for(:wv_minecraft_183)
        post :create, wonko_file_id: wonko_file.to_param,
                      wonko_version: attributes
        expect(response).to redirect_to(wonko_file_wonko_version_path(wonko_file, attributes[:version]))
      end
    end

    context 'with invalid params' do
      it 'assigns a newly created but unsaved wonko_version as @wonko_version' do
        post :create, wonko_file_id: Fabricate(:wf_minecraft).to_param, wonko_version: invalid_attributes
        expect(assigns(:wonko_version)).to be_a_new(WonkoVersion)
      end

      it 're-renders the \'new\' template' do
        post :create, wonko_file_id: Fabricate(:wf_minecraft).to_param, wonko_version: invalid_attributes
        expect(response).to render_template('new')
      end
    end
  end

  describe 'PUT #update' do
    login_official

    context 'with valid params' do
      let(:new_attributes) do
        {
          time: 1_111_111_111,
          type: 'stable'
        }
      end

      it 'updates the requested wonko_version' do
        wonko_version = Fabricate(:wv_minecraft_181)

        put :update, wonko_file_id: wonko_version.wonkofile.to_param, id: wonko_version.to_param,
                     wonko_version: new_attributes
        wonko_version.reload
        expect(wonko_version.type).to eq 'stable'
      end

      it 'assigns the requested wonko_version as @wonko_version' do
        wonko_version = Fabricate(:wv_minecraft_181)

        put :update, wonko_file_id: wonko_version.wonkofile.to_param, id: wonko_version.to_param,
                     wonko_version: new_attributes
        expect(assigns(:wonko_version)).to eq(wonko_version)
      end

      it 'redirects to the wonko_version' do
        wonko_version = Fabricate(:wv_minecraft_181)

        put :update, wonko_file_id: wonko_version.wonkofile.to_param, id: wonko_version.to_param,
                     wonko_version: new_attributes
        expect(response).to redirect_to([wonko_version.wonkofile, wonko_version])
      end
    end

    context 'with invalid params' do
      it 'assigns the wonko_version as @wonko_version' do
        wonko_version = Fabricate(:wv_minecraft_181)

        put :update, wonko_file_id: wonko_version.wonkofile.to_param, id: wonko_version.to_param,
                     wonko_version: invalid_attributes
        expect(assigns(:wonko_version)).to eq(wonko_version)
      end

      it 're-renders the \'edit\' template' do
        wonko_version = Fabricate(:wv_minecraft_181)

        put :update, wonko_file_id: wonko_version.wonkofile.to_param, id: wonko_version.to_param,
                     wonko_version: invalid_attributes
        expect(response).to render_template('edit')
      end
    end
  end

  describe 'DELETE #destroy' do
    login_official

    it 'destroys the requested wonko_version' do
      wonko_version = Fabricate(:wv_minecraft_181)
      file = wonko_version.wonkofile

      expect do
        delete :destroy, wonko_file_id: file.to_param, id: wonko_version.to_param
      end.to change { file.reload.wonkoversions.count }.by(-1)
    end

    it 'redirects to the wonko_versions list' do
      wonko_version = Fabricate(:wv_minecraft_183)

      delete :destroy, wonko_file_id: wonko_version.wonkofile.to_param, id: wonko_version.to_param
      expect(response).to redirect_to(wonko_file_wonko_versions_url(wonko_version.wonkofile))
    end
  end
end
